#include "ad_type.h"

#include "G4HepEmPositronInteractionAnnihilation.hh"

#include "G4HepEmTLData.hh"

#include "G4HepEmElectronTrack.hh"
#include "G4HepEmGammaTrack.hh"
#include "G4HepEmConstants.hh"
#include "G4HepEmRunUtils.hh"
#include "G4HepEmMath.hh"

//#include <iostream>


void G4HepEmPositronInteractionAnnihilation::Perform(G4HepEmTLData* tlData, bool isatrest) {
   if (isatrest) {
     AnnihilateAtRest(tlData);
   } else {
     AnnihilateInFlight(tlData);
   }
}

void G4HepEmPositronInteractionAnnihilation::AnnihilateAtRest(G4HepEmTLData* tlData) {
  // compute kinematics of the first gamma (isotropic direction)
  const G4double cost = 2. * tlData->GetRNGEngine()->flat() - 1.;
  const G4double sint = std::sqrt((1. - cost)*(1. + cost));
  const G4double  phi = k2Pi * tlData->GetRNGEngine()->flat();
  // get 2 secondary gamma track
  G4HepEmTrack*    secGamma1 = tlData->AddSecondaryGammaTrack()->GetTrack();
  G4double*       secGamma1Dir = secGamma1->GetDirection();
  G4HepEmTrack*    secGamma2 = tlData->AddSecondaryGammaTrack()->GetTrack();
  G4double*       secGamma2Dir = secGamma2->GetDirection();
  secGamma1Dir[0]  = sint*std::cos(phi);
  secGamma1Dir[1]  = sint*std::sin(phi);
  secGamma1Dir[2]  = cost;
  // compute the kinematics of the second gamma (conservation==> -first)
  secGamma2Dir[0]  = -secGamma1Dir[0];
  secGamma2Dir[1]  = -secGamma1Dir[1];
  secGamma2Dir[2]  = -secGamma1Dir[2];
  //G4HepEmTrack* thePrimaryTrack = tlData->GetPrimaryElectronTrack()->GetTrack();
  //const int theParentID = thePrimaryTrack->GetID();
  // ekin should have been set by the caller
  //thePrimaryTrack->SetEKin(0.0);
  const int theParentID = tlData->GetPrimaryElectronTrack()->GetTrack()->GetID();
  secGamma1->SetEKin(kElectronMassC2);
  secGamma1->SetParentID(theParentID);
  secGamma2->SetEKin(kElectronMassC2);
  secGamma2->SetParentID(theParentID);
}

void G4HepEmPositronInteractionAnnihilation::SampleEnergyAndDirectionsInFlight(
    const G4double thePrimEkin, const G4double *thePrimDir, G4double *theGamma1Ekin, G4double *theGamma1Dir,
    G4double *theGamma2Ekin, G4double *theGamma2Dir, G4HepEmRandomEngine* rnge) {
  // compute kinetic limits
  const G4double tau     = thePrimEkin*kInvElectronMassC2;
  const G4double gam     = tau + 1.0;
  const G4double tau2    = tau + 2.0;
  const G4double sqgrate = std::sqrt(tau/tau2)*0.5;
  //
  const G4double epsmin  = 0.5 - sqgrate;
  const G4double epsmax  = 0.5 + sqgrate;
  const G4double epsqot  = epsmax/epsmin;
  // sampling of the energy rate of the gammas
  const G4double tau4    = tau2*tau2;
  G4double eps   = 0.0;
  G4double rfunc = 0.0;
  G4double rndArray[2];
  do {
    rnge->flatArray(2, rndArray);
    eps   = epsmin*G4HepEmExp(G4HepEmLog(epsqot)*rndArray[0]);
    rfunc = 1. - eps + (2.*gam*eps-1.)/(eps*tau4);
  } while( rfunc < rndArray[1]);
  // compute direction of the gammas
  const G4double sqg2m1 = std::sqrt(tau*tau2);
  const G4double   cost = G4HepEmMin(1., G4HepEmMax(-1., (eps*tau2-1.)/(eps*sqg2m1)));
  const G4double   sint = std::sqrt((1.+cost)*(1.-cost));
  const G4double    phi = k2Pi * rnge->flat();
  // kinematics of the first gamma
  const G4double initEt = thePrimEkin + 2.*kElectronMassC2;
  const G4double ekinG1 = eps*initEt;
  *theGamma1Ekin = ekinG1;
  theGamma1Dir[0] = sint*std::cos(phi);
  theGamma1Dir[1] = sint*std::sin(phi);
  theGamma1Dir[2] = cost;
  // use the G4HepEmRunUtils function
  RotateToReferenceFrame(theGamma1Dir, thePrimDir);
  // kinematics of the second gamma (direction <== conservation)
  *theGamma2Ekin = initEt-ekinG1;
  const G4double initPt = std::sqrt(thePrimEkin*(thePrimEkin+2*kElectronMassC2));
  const G4double     px = initPt*thePrimDir[0] - theGamma1Dir[0]*ekinG1;
  const G4double     py = initPt*thePrimDir[1] - theGamma1Dir[1]*ekinG1;
  const G4double     pz = initPt*thePrimDir[2] - theGamma1Dir[2]*ekinG1;
  const G4double   norm = 1.0 / std::sqrt(px*px + py*py + pz*pz);
  theGamma2Dir[0] = px*norm;
  theGamma2Dir[1] = py*norm;
  theGamma2Dir[2] = pz*norm;
}

void G4HepEmPositronInteractionAnnihilation::AnnihilateInFlight(G4HepEmTLData* tlData) {
  // get the primary e+ track
  G4HepEmElectronTrack* thePrimaryElTrack = tlData->GetPrimaryElectronTrack();
  G4HepEmTrack* thePrimaryTrack = thePrimaryElTrack->GetTrack();
  G4double            thePrimEkin = thePrimaryTrack->GetEKin();
  const G4double*      thePrimDir = thePrimaryTrack->GetDirection();

  G4HepEmTrack*  gTr1 = tlData->AddSecondaryGammaTrack()->GetTrack();
  G4HepEmTrack*  gTr2 = tlData->AddSecondaryGammaTrack()->GetTrack();
  G4double gamE1, gamE2;
  SampleEnergyAndDirectionsInFlight(thePrimEkin, thePrimDir, &gamE1, gTr1->GetDirection(), &gamE2, gTr2->GetDirection(), tlData->GetRNGEngine());

  gTr1->SetEKin(gamE1);
  gTr2->SetEKin(gamE2);
  const int theParentID = tlData->GetPrimaryElectronTrack()->GetTrack()->GetID();
  gTr1->SetParentID(theParentID);
  gTr2->SetParentID(theParentID);
  //
  // set primary e+ track kinetic energy to zero ==> killed
  thePrimaryTrack->SetEKin(0.0);
}
