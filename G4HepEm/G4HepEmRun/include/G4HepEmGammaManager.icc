#include "ad_type.h"
#include "G4HepEmGammaManager.hh"

#include "G4HepEmData.hh"
#include "G4HepEmParameters.hh"
#include "G4HepEmTLData.hh"

#include "G4HepEmConstants.hh"
#include "G4HepEmMatCutData.hh"
#include "G4HepEmMaterialData.hh"
#include "G4HepEmGammaData.hh"

#include "G4HepEmMath.hh"

#include "G4HepEmRunUtils.hh"
#include "G4HepEmTrack.hh"
#include "G4HepEmElectronTrack.hh"
#include "G4HepEmGammaTrack.hh"

#include "G4HepEmGammaInteractionConversion.hh"
#include "G4HepEmGammaInteractionCompton.hh"
#include "G4HepEmGammaInteractionPhotoelectric.hh"

#include <iostream>

// Note: pStepLength will be set here i.e. this is the first access to it that
//       will clear the previous step value.
void G4HepEmGammaManager::HowFar(struct G4HepEmData* hepEmData, struct G4HepEmParameters* hepEmPars, G4HepEmTLData* tlData) {
  G4HepEmGammaTrack* theGammaTrack = tlData->GetPrimaryGammaTrack();
  G4HepEmTrack* theTrack = theGammaTrack->GetTrack();
  // Sample the `number-of-interaction-left`
  for (int ip=0; ip<3; ++ip) {
    if (theTrack->GetNumIALeft(ip)<=0.) {
      theTrack->SetNumIALeft(-G4HepEmLog(tlData->GetRNGEngine()->flat()), ip);
    }
  }
  HowFar(hepEmData, hepEmPars, theGammaTrack);
}


void G4HepEmGammaManager::HowFar(struct G4HepEmData* hepEmData, struct G4HepEmParameters* /*hepEmPars*/, G4HepEmGammaTrack* theGammaTrack) {
  G4HepEmTrack* theTrack = theGammaTrack->GetTrack();
  const G4double   theEkin = theTrack->GetEKin();
  const G4double  theLEkin = theTrack->GetLogEKin();
  const int   theMatIndx = hepEmData->fTheMatCutData->fMatCutData[theTrack->GetMCIndex()].fHepEmMatIndex;
  // get the Gamma data from the op level data structure
  const G4HepEmGammaData* theGammaData = hepEmData->fTheGammaData;
  // === Gamma has only discrete limits due to Conversion, Compton, and the photoelectric effect.
  G4double mxSecs[3];
  // conversion, compton and photoelectric
  mxSecs[0] = GetMacXSec(theGammaData, theMatIndx, theEkin, theLEkin, 0);
  mxSecs[1] = GetMacXSec(theGammaData, theMatIndx, theEkin, theLEkin, 1);
  mxSecs[2] = GetMacXSecPE(hepEmData, theMatIndx, theEkin);
  // Remember value of photoelectric effect, needed for selecting the element.
  theGammaTrack->SetPEmxSec(mxSecs[2]);
  // compute mfp and see if we need to sample the `number-of-interaction-left`
  // before we use it to get the current discrete proposed step length
  int indxWinnerProcess = -1;             // init to nothing
  G4double pStepLength    = kALargeValue;   // init to a large value
  for (int ip=0; ip<3; ++ip) {
    const G4double mxsec = mxSecs[ip];
    const G4double   mfp = (mxsec>0.) ? 1./mxsec : kALargeValue;
    // save the mac-xsec for the update of the `number-of-interaction-left`:
    // the `number-of-intercation-left` should be updated in the along-step-action
    theTrack->SetMFP(mfp, ip);
    // sample the proposed step length
    const G4double dStepLimit = mfp*theTrack->GetNumIALeft(ip);
//    std::cout << " ip = " << ip << " mxsec = " << mxsec << " dStepLimit = " << dStepLimit << std::endl;
    if (dStepLimit<pStepLength) {
      pStepLength = dStepLimit;
      indxWinnerProcess = ip;
    }
  }
//  std::cout << "indxWinnerProcess = " << indxWinnerProcess <<  " dStepLimit = " << pStepLength << std::endl;
  //
  // the geometrical and physical step lengths are the same for gamma
  theTrack->SetGStepLength(pStepLength);
  theTrack->SetWinnerProcessIndex(indxWinnerProcess);
  //
}


void G4HepEmGammaManager::Perform(struct G4HepEmData* hepEmData, struct G4HepEmParameters* /*hepEmPars*/, G4HepEmTLData* tlData) {
  G4HepEmTrack* theTrack = tlData->GetPrimaryGammaTrack()->GetTrack();
  // === 1. The `number-of-interaction-left` needs to be updated based on the actual
  //        step lenght and the energy deposit needs to be reset to 0.0
  // physical step length is the geometrical fo rgamma
  UpdateNumIALeft(theTrack);
  // reset energy deposit
  theTrack->SetEnergyDeposit(0.0);
  // === Gamma has pure Discrete interaction (if any)
  // 2. check if discrete process limited the step return otherwise (i.e. if
  //    boundary process limited the step)
  if (theTrack->GetOnBoundary()) {
    return;
  }
  // reset number of interaction left for the winner discrete process
  const int iDProc = theTrack->GetWinnerProcessIndex();
  theTrack->SetNumIALeft(-1.0, iDProc);
//  std::cout<< " --- iDProc = " << iDProc << std::endl;
  //
  // perform the discrete part of the winner interaction
  switch (iDProc) {
    case 0: // invoke gamma Conversion to e-/e+ pairs: {
            G4HepEmGammaInteractionConversion::Perform(tlData, hepEmData);
            break;
    case 1: // invoke Compton scattering of gamma:
            G4HepEmGammaInteractionCompton::Perform(tlData, hepEmData);
            break;
    case 2: // invoke photoelectric process:
            G4HepEmGammaInteractionPhotoelectric::Perform(tlData, hepEmData);
            break;

  }
}


void   G4HepEmGammaManager::UpdateNumIALeft(G4HepEmTrack* theTrack) {
  const G4double pStepLength = theTrack->GetGStepLength();
  G4double*    numInterALeft = theTrack->GetNumIALeft();
  G4double*       preStepMFP = theTrack->GetMFP();
  numInterALeft[0] -= pStepLength/preStepMFP[0];
  numInterALeft[1] -= pStepLength/preStepMFP[1];
  numInterALeft[2] -= pStepLength/preStepMFP[2];
}


G4double  G4HepEmGammaManager::GetMacXSec(const struct G4HepEmGammaData* gmData, const int imat, const G4double ekin, const G4double lekin, const int iprocess) {
  // get number of Conversion and Compton discrete energy grid points
  const int numConvData = gmData->fConvEnergyGridSize;
  const int numCompData = gmData->fCompEnergyGridSize;
  const int      iStart = imat*2*(numConvData + numCompData);
  // use the G4HepEmRunUtils GetSplineLog function for interpolation
  switch (iprocess) {
    case 0: { // Conversion
              const G4double  mxsec = GetSplineLog(numConvData, gmData->fConvEnergyGrid, &(gmData->fConvCompMacXsecData[iStart]) , ekin, lekin, gmData->fConvLogMinEkin, gmData->fConvEILDelta);
              return G4HepEmMax(0.0, mxsec);
            }
    case 1: { // Compton
              const G4double  mxsec = GetSplineLog(numCompData, gmData->fCompEnergyGrid, &(gmData->fConvCompMacXsecData[iStart+2*numConvData]) , ekin, lekin, gmData->fCompLogMinEkin, gmData->fCompEILDelta);
              return G4HepEmMax(0.0, mxsec);
            }
    default:
            return 0.0;
  }
}

G4double G4HepEmGammaManager::GetMacXSecPE(const struct G4HepEmData* hepEmData, const int imat, const G4double ekin) {
  const G4HepEmMatData* matData = &hepEmData->fTheMaterialData->fMaterialData[imat];
  int interval = 0;
  if (ekin >= matData->fSandiaEnergies[0]) {
    // Optimization: linear search starting with intervals for higher energies.
    for (int i = matData->fNumOfSandiaIntervals - 1; i >= 0; i--) {
      if (ekin >= matData->fSandiaEnergies[i]) {
        interval = i;
        break;
      }
    }
  }
  const G4double* sandiaCof = &matData->fSandiaCoefficients[4 * interval];
  const G4double inv = 1 / ekin;
  return inv * (sandiaCof[0] + inv * (sandiaCof[1] + inv * (sandiaCof[2] + inv * sandiaCof[3])));
}
