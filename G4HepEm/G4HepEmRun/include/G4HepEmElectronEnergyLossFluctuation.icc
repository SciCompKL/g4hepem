
#include "G4HepEmElectronEnergyLossFluctuation.hh"


#include "G4HepEmRandomEngine.hh"

#include "G4HepEmConstants.hh"
#include "G4HepEmMath.hh"


G4double G4HepEmElectronEnergyLossFluctuation::SampleEnergyLossFLuctuation(G4double ekin, G4double tcut, G4double tmax,
       G4double excEner, G4double stepLength, G4double meanELoss, G4HepEmRandomEngine* rnge) {
  const G4double scaling  = G4HepEmMin(1. + 5.E-4/tcut, 1.5);
  const G4double meanLoss = meanELoss/scaling;

  const G4double kFluctParRate     = 0.56;
  const G4double kFluctParE0       = 1.E-5; // 10 eV
  const G4double kFluctParNMaxCont = 8.;

  const G4double w1 = tcut/kFluctParE0;
  G4double a3 = meanLoss*(tcut - kFluctParE0)/(kFluctParE0*tcut*G4HepEmLog(w1));
  G4double a1 = 0.;
  G4double e1 = excEner;
  G4double eloss = 0.0;
  // 1. excittaion part
  if (tcut > excEner) {
    const G4double a1Tmp = meanLoss*(1. - kFluctParRate)/excEner;
    // NOTE: this corresponds to G4UniversalFluctuation as in G4-v11.p01
    const G4double kFluctParA0 = 42.;
    const G4double kFluctParFw =  4.;
    const G4double dum0  = a1Tmp < kFluctParA0
                         ? .1 + (kFluctParFw - .1)*std::sqrt(a1Tmp/kFluctParA0)
                         : kFluctParFw;
    // NOTE: this corresponds to G4UniversalFluctuation as in G4-v11.00
    // const G4double kFluctParA0 = 15.;
    // const G4double kFluctParFw =  5.;
    // const G4double dum0  = a1Tmp < kFluctParA0
    //                      ? kFluctParFw*a1Tmp/kFluctParA0
    //                      : kFluctParFw;
    a1  = a1Tmp/dum0;
    e1 *= dum0;
    a3 *= kFluctParRate;
    //
    // add excition (a1 > 0)
    if (a1 > kFluctParNMaxCont) {
      // Gaussian
      const G4double emean = a1*e1;
      const G4double sig2e = emean*e1;
      eloss = SampleGaussianLoss(emean, sig2e, rnge);
    } else {
      // small number --> sampling from Poisson
      const int p = rnge->Poisson(a1);
      eloss = p > 0 ? ((p + 1) - 2.*rnge->flat())*e1 : 0.;
    }
  }
  //
  // 2. ionisation part
  if (a3 > 0.) {
    G4double   p3 = a3;
    G4double alfa = 1.;
    if (a3 > kFluctParNMaxCont) {
      alfa = w1*(kFluctParNMaxCont + a3)/(w1*kFluctParNMaxCont + a3);
      const G4double alfa1  = alfa*G4HepEmLog(alfa)/(alfa - 1.);
      const G4double namean = a3*w1*(alfa - 1.)/((w1 - 1.)*alfa);
      const G4double emean  = namean*kFluctParE0*alfa1;
      const G4double sig2e  = kFluctParE0*kFluctParE0*namean*(alfa - alfa1*alfa1);
      eloss += SampleGaussianLoss(emean, sig2e, rnge);
      p3 = a3 - namean;
    }
    //
    const G4double w3 = alfa*kFluctParE0;
    if (tcut > w3) {
      const G4double w = (tcut - w3)/tcut;
      const int  nnb = rnge->Poisson(p3);
      if (nnb > 0) {
        const int kBlockSize = 8;
        const int nBlocks    = nnb/kBlockSize;
        //
        G4double rndm[kBlockSize];
        for (int ib=0; ib<nBlocks; ++ib) {
          rnge->flatArray(kBlockSize, rndm);
          for (int i=0; i<kBlockSize; ++i) {
            eloss += w3/(1.-w*rndm[i]);
          }
        }
        const int nTail = nnb - nBlocks*kBlockSize;
        rnge->flatArray(nTail, rndm);
        for (int i=0; i<nTail; ++i) {
          eloss += w3/(1.-w*rndm[i]);
        }
      }
    }
  }
  //
  // deliver result
  return eloss*scaling;
}


G4double G4HepEmElectronEnergyLossFluctuation::SampleGaussianLoss(G4double meane, G4double sig2e, G4HepEmRandomEngine* rnge) {
  const G4double twom = 2.*meane;
  if (meane*meane < 0.0625*sig2e) {
    return twom*rnge->flat();
  }
  const G4double sig = std::sqrt(sig2e);
  G4double eloss;
  do {
    eloss = rnge->Gauss(meane, sig);
  } while (eloss < 0. || eloss > twom);
  return eloss;
}
