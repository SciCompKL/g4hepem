#include "ad_type.h"

#include "G4HepEmRunUtils.hh"

#include "G4HepEmMath.hh"

#include <cmath>
#include <algorithm>


// Roate the direction [u,v,w] given in the scattering frame to the lab frame.
// Details: scattering is described relative to the [0,0,1] direction (i.e. scattering
// frame). Therefore, after the new direction is computed relative to this [0,0,1]
// original direction, the real original direction [u1,u2,u3] in the lab frame
// needs to be accounted and the final new direction, i.e. in the lab frame is
// computed.
void RotateToReferenceFrame(G4double &u, G4double &v, G4double &w, const G4double* refDir) {
  G4double up = refDir[0]*refDir[0] + refDir[1]*refDir[1];
  if (up>0.) {
    up = std::sqrt(up);
    const G4double px = u;
    const G4double py = v;
    const G4double pz = w;
    u = (refDir[0]*refDir[2]*px - refDir[1]*py)/up + refDir[0]*pz;
    v = (refDir[1]*refDir[2]*px + refDir[0]*py)/up + refDir[1]*pz;
    w =    -up*px +             refDir[2]*pz;
  } else if (refDir[2]<0.) {       // phi=0  teta=pi
    u = -u;
    w = -w;
  }
}

void RotateToReferenceFrame(G4double* dir, const G4double* refDir) {
  G4double up = refDir[0]*refDir[0] + refDir[1]*refDir[1];
  if (up>0.) {
    up = std::sqrt(up);
    const G4double px = dir[0];
    const G4double py = dir[1];
    const G4double pz = dir[2];
    dir[0] = (refDir[0]*refDir[2]*px - refDir[1]*py)/up + refDir[0]*pz;
    dir[1] = (refDir[1]*refDir[2]*px + refDir[0]*py)/up + refDir[1]*pz;
    dir[2] =    -up*px +             refDir[2]*pz;
  } else if (refDir[2]<0.) {       // phi=0  teta=pi
    dir[0] = -dir[0];
    dir[2] = -dir[2];
  }
}

// use the improved, robust spline interpolation that I put in G4 10.6
G4double GetSpline(G4double x1, G4double x2, G4double y1, G4double y2, G4double secderiv1, G4double secderiv2, G4double x)
{
  // Unchecked precondition: x1 < x < x2
  const G4double dl = x2 - x1;
  // note: all corner cases of the previous methods are covered and eventually
  //       gives b=0/1 that results in y=y0\y_{N-1} if e<=x[0]/e>=x[N-1] or
  //       y=y_i/y_{i+1} if e<x[i]/e>=x[i+1] due to small numerical errors
  const G4double  b = G4HepEmMax(0., G4HepEmMin(1., (x - x1)/dl));
  const G4double os = 0.166666666667; // 1./6.
  const G4double c0 = (2.0 - b)*secderiv1;
  const G4double c1 = (1.0 + b)*secderiv2;
  return y1 + b*(y2 - y1) + (b*(b-1.0))*(c0+c1)*(dl*dl*os);
}

// use the improved, robust spline interpolation that I put in G4 10.6
G4double GetSplineLog(int ndata, G4double* xdata, G4double* ydata, G4double* secderiv, G4double x, G4double logx, G4double logxmin, G4double invLDBin) {
  // make sure that $x \in  [x[0],x[ndata-1]]$
  const G4double xv = G4HepEmMax(xdata[0], G4HepEmMin(xdata[ndata-1], x));
  // compute the lowerindex of the x bin (idx \in [0,N-2] will be guaranted)
  const int   idx = (int)G4HepEmMax(0., G4HepEmMin((logx-logxmin)*invLDBin, ndata-2.));
  return GetSpline(xdata[idx], xdata[idx+1], ydata[idx], ydata[idx+1], secderiv[idx], secderiv[idx+1], xv);
}

// same as above but both ydata and secderiv are stored in ydata array
G4double GetSplineLog(int ndata, G4double* xdata, G4double* ydata, G4double x, G4double logx, G4double logxmin, G4double invLDBin) {
  // make sure that $x \in  [x[0],x[ndata-1]]$
  const G4double xv = G4HepEmMax(xdata[0], G4HepEmMin(xdata[ndata-1], x));
  // compute the lowerindex of the x bin (idx \in [0,N-2] will be guaranted)
  const int   idx = (int)G4HepEmMax(0., G4HepEmMin((logx-logxmin)*invLDBin, ndata-2.));
  const int  idx2 = 2*idx; 
  return GetSpline(xdata[idx], xdata[idx+1], ydata[idx2], ydata[idx2+2], ydata[idx2+1], ydata[idx2+3], xv);
}


// same as above but all xdata, ydata and secderiv are stored in data array
G4double GetSplineLog(int ndata, G4double* data, G4double x, G4double logx, G4double logxmin, G4double invLDBin) {
  // make sure that $x \in  [x[0],x[ndata-1]]$
  const G4double xv = G4HepEmMax(data[0], G4HepEmMin(data[3*(ndata-1)], x));
  // compute the lowerindex of the x bin (idx \in [0,N-2] will be guaranted)
  const int   idx = (int)G4HepEmMax(0., G4HepEmMin((logx-logxmin)*invLDBin, ndata-2.));
  const int  idx3 = 3*idx;
  return GetSpline(data[idx3], data[idx3+3], data[idx3+1], data[idx3+4], data[idx3+2], data[idx3+5], xv);
}


// this is used for getting inverse-range on host
G4double GetSpline(G4double* xdata, G4double* ydata, G4double* secderiv, G4double x, int idx, int step) {
  return GetSpline(xdata[step*idx], xdata[step*(idx+1)], ydata[idx], ydata[idx+1], secderiv[idx], secderiv[idx+1], x);
}

// same as above but both ydata and secderiv are stored in ydata array
G4double GetSpline(G4double* xdata, G4double* ydata, G4double x, int idx) {
  const int  idx2 = 2*idx;
  return GetSpline(xdata[idx], xdata[idx+1], ydata[idx2], ydata[idx2+2], ydata[idx2+1], ydata[idx2+3], x);
}

// same as above but both xdata, ydata and secderiv are stored in data array
G4double GetSpline(G4double* data, G4double x, int idx) {
  const int  idx3 = 3*idx;
  return GetSpline(data[idx3], data[idx3+3], data[idx3+1], data[idx3+4], data[idx3+2], data[idx3+5], x);
}

// this is used to get index for inverse range on host
// NOTE: it is assumed that x[0] <= x and x < x[step*(num-1)]
// step: the delta with which   the x values are located in xdata (i.e. =1 by default)
int    FindLowerBinIndex(G4double* xdata, int num, G4double x, int step) {
  // Perform a binary search to find the interval val is in
  int ml = -1;
  int mu = num-1;
  while (std::abs(mu-ml)>1) {
    int mav = 0.5*(ml+mu);
    if (x<xdata[step*mav]) {  mu = mav; }
    else                   {  ml = mav; }
  }
  return mu-1;
}
